/*
	Improving the User Interface:

	- Remove the duplicate error messages
	- Customize the help usage message
	- Allow the user to enter their name via a positional argument
*/

package main

import (
	"bufio"
	"errors"
	"flag"
	"fmt"
	"io"
	"os"
)

var(
	errInvalidPosArgSpecified = errors.New("more than one positional argument specified")
	errPosArgSpecified= errors.New("positional arguments specified")
)
type config struct{
	numTimes		int
	name			string
}

func parseArgs(w io.Writer, args []string)(config, error){
	c := config{}

	fs := flag.NewFlagSet("greeter", flag.ContinueOnError)

	// Specifies that any usage or error messages generated by the flag set should be written to the writer w
	fs.SetOutput(w)
	// Once we set the Usage attribute of the FlagSet object to a custom function, it is called whenever there is an error parsing the specified options.
	fs.Usage =func() {
		var usageString = `A greeter application which prints the name you entered a specified number of times.
		
		Usage of %s: `

		fmt.Fprintf(w, usageString, fs.Name())
		fmt.Fprintln(w) // Adds an empty line for readability.
		fmt.Fprintln(w, "Options: ")
		fs.PrintDefaults() // Prints a list of all flags defined in the flag set, along with their default values and usage information.
	}

	fs.IntVar(&c.numTimes, "n", 0, "Number of times to greet")
	err := fs.Parse(args)
	if err != nil{
		return c, err
	}

	if fs.NArg() == 1{
		c.name = fs.Arg(0)
	}

	if fs.NArg()> 1 {
		return c, errInvalidPosArgSpecified
	}	   

	return c, nil
}

func validateArgs(c config) error {
	if !(c.numTimes >0){
		return errors.New("must specify a number greater than 0")
	}
	return nil
}

// iss function ka use apan user se naam puchhne ke liye karenge
func getName(r io.Reader, w io.Writer)(string, error){
	msg := "Your name please? Press Enter when done\n"

	fmt.Fprint(w, msg)
	scanner := bufio.NewScanner(r)
	scanner.Scan()

	if err := scanner.Err(); err != nil{
		return "", err
	}
	name := scanner.Text()

	if len(name) == 0{
		return "", errors.New("you didn't enter your name")
	}

	return name, nil
}

// ye function run karega commands
func runCmd(r io.Reader, w io.Writer, c config)(error){
	var err error
	// if the name has not been entered as a positional argument, ask user to enter it
	if len(c.name) == 0 {
		c.name, err = getName(r, w)
		if err != nil{
			return err
		}
	}
	
	greetUser(c, w)
	return nil
}

// runCmd isse call karega, print karne ke liye
func greetUser(c config, w io.Writer){
	msg := fmt.Sprintf("Nice to meet you, %s\n", c.name)

	for i :=0; i< c.numTimes; i++{
		fmt.Fprint(w, msg)
	}

}


func main(){
	c, err := parseArgs(os.Stderr, os.Args[1:])
	if err != nil{
		if errors.Is(err, errPosArgSpecified){
			fmt.Fprint(os.Stderr, err)
		}
		os.Exit(1)
	}
	
	err = validateArgs(c)
	if err != nil{
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}

	err = runCmd(os.Stdin, os.Stdout, c)
	if err != nil{
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}